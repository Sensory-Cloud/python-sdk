import os
import dotenv
import uuid

from sensory_cloud.services.management_service import ManagementService
from sensory_cloud.config import Config
from sensory_cloud.token_manager import TokenManager
from sensory_cloud.services.oauth_service import OauthService

from credential_store import CredentialStore

dotenv.load_dotenv(override=True)

is_connection_secure = True
is_liveness_enabled = False
model_name = "wakeword-16kHz-open_sesame.ubm"
device_name = 'jhersch-python-sdk-dev'
enrollment_description = "my enrollment"

fully_qualifiied_domain_name = os.environ.get("FULLY_QUALIFIED_DOMAIN_NAME")
tenant_id = os.environ.get("TENANT_ID")
client_id = os.environ.get("CLIENT_ID")
client_secret = os.environ.get("CLIENT_SECRET")
device_id = os.environ.get("DEVICE_ID")
device_credential = os.environ.get("DEVICE_CREDENTIAL")
user_id = os.environ.get("USER_ID")
enrollment_id = os.environ.get("ENROLLMENT_ID")

def get_management_service():
    config = Config(
        fully_qualifiied_domain_name=fully_qualifiied_domain_name, 
        is_connection_secure=is_connection_secure, 
        tenant_id=tenant_id
    )
    config.connect()

    cred_store = CredentialStore(client_id, client_secret)
    oauth_service = OauthService(config=config, secure_credential_store=cred_store)

    token_manager = TokenManager(oauth_service=oauth_service)

    return ManagementService(config=config, token_manager=token_manager)


def example_get_enrollments():

    management_service = get_management_service()
    return management_service.get_enrollments(user_id=user_id)

def example_create_enrollment_group():

    group_id = str(uuid.uuid4())
    group_name = "python-sdk-example-group"
    description = "Example enrollment group generated by the python sdk"
    model_name = "wakeword-16kHz-open_sesame.ubm"
    enrollment_ids = [enrollment_id]

    management_service = get_management_service()

    all_groups = management_service.get_enrollment_groups(user_id=user_id)
    for group in all_groups.enrollmentGroups:
        if group.id == group_id:
            management_service.delete_enrollment_group(group_id=group_id)

    management_service.create_enrollment_group(
        user_id=user_id,
        group_id=group_id,
        group_name=group_name,
        description=description,
        model_name=model_name,
        enrollment_ids=enrollment_ids
    )

    all_groups = management_service.get_enrollment_groups(user_id=user_id)
    print([group for group in all_groups.enrollmentGroups if group.id == group_id])


if __name__ == "__main__":
    example_create_enrollment_group()
